generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  nickname       String
  provider       String
  hashedPassword String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  role           Role     @default(USER)
  grade          Grade    @default(NORMAL)

  works         Work[]
  challenges    Challenge[]
  notifications Notification[]
  likes         Like[]
  feedbacks     Feedback[]
}

model Challenge {
  id            Int         @id @default(autoincrement())
  title         String
  description   String
  category      String
  type          String
  originalUrl   String
  adminStatus   AdminStatus @default(PENDING)
  adminMessage  String?
  deadline      DateTime
  maxWorksCount Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  works Work[]

  user     User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
}

model Work {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  feedbacks Feedback[]
  likes     Like[]

  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId Int

  user     User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String?
  workId   Int?
}

model Feedback {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  work   Work @relation(fields: [workId], references: [id], onDelete: Cascade)
  workId Int

  user     User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
}

model Notification {
  id        Int      @id @default(autoincrement())
  type      String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String
}

model Like {
  id Int @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  works  Work   @relation(fields: [workId], references: [id], onDelete: Cascade)
  workId Int

  @@unique([userId, workId])
}

enum Grade {
  NORMAL
  EXPERT
}

enum Role {
  USER
  ADMIN
}

enum AdminStatus {
  PENDING
  ACCEPTED
  REJECTED
  DELETED
}
