generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  nickname       String
  hashedPassword String?
  providerId     Int?     @unique
  provider       String   @default("local")
  refreshToken   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  role           Role     @default(USER)
  grade          Grade    @default(NORMAL)

  works           Work[]
  challenges      Challenge[]
  notifications   Notification[]
  likes           Like[]
  feedbacks       Feedback[]
  maxParticipants maxParticipant[]
}

model Challenge {
  id           Int         @id @default(autoincrement())
  authorId     String
  title        String
  description  String
  category     String
  docType      String
  originalUrl  String
  adminStatus  AdminStatus @default(PENDING)
  adminMessage String?
  deadline     DateTime
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  works           Work[]
  maxParticipants maxParticipant[]
  user            User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Work {
  id          Int        @id @default(autoincrement())
  authorId    String
  challengeId Int
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  feedbacks   Feedback[]
  likes       Like[]

  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        Int      @id @default(autoincrement())
  workId    Int
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  work Work @relation(fields: [workId], references: [id], onDelete: Cascade)
  user User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int      @id @default(autoincrement())
  authorId  String
  isRead    Boolean  @default(false)
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Like {
  id     Int    @id @default(autoincrement())
  workId Int
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  work Work @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@unique([userId, workId])
}

model maxParticipant {
  id          Int    @id @default(autoincrement())
  userId      String
  challengeId Int

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
}

enum Grade {
  NORMAL
  EXPERT
}

enum Role {
  USER
  ADMIN
}

enum AdminStatus {
  PENDING
  ACCEPTED
  REJECTED
  DELETED
}
