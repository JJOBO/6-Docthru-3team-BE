generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  nickname       String
  hashedPassword String?
  refreshToken   String?
  providerId     String?  @unique
  provider       String   @default("local")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  role           Role     @default(USER)
  grade          Grade    @default(NORMAL)

  works         Work[]
  challenges    Challenge[]
  notifications Notification[]
  likes         Like[]
  feedbacks     Feedback[]
  participants  Participant[]
  applications  Application[]
}

model Application {
  id            Int         @id @default(autoincrement())
  authorId      String
  challengeId   Int         @unique
  adminStatus   adminStatus @default(PENDING)
  adminMessage  String?
  invalidatedAt DateTime?
  appliedAt     DateTime

  user      User      @relation(fields: [authorId], references: [id])
  challenge Challenge @relation(fields: [challengeId], references: [id])
}

model Challenge {
  id             Int      @id @default(autoincrement())
  authorId       String
  title          String
  description    String   @default("")
  category       String
  docType        String
  originalUrl    String
  deadline       DateTime
  maxParticipant Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user         User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  application  Application?
  works        Work[]
  participants Participant[]
}

model Work {
  id          Int        @id @default(autoincrement())
  authorId    String
  challengeId Int
  content     String     @default("")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  feedbacks   Feedback[]
  likes       Like[]

  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        Int      @id @default(autoincrement())
  workId    Int
  authorId  String
  content   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  work Work @relation(fields: [workId], references: [id], onDelete: Cascade)
  user User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    String
  isRead    Boolean  @default(false)
  message   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id     Int    @id @default(autoincrement())
  workId Int
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  work Work @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@unique([userId, workId])
}

model Participant {
  id          Int    @id @default(autoincrement())
  challengeId Int
  userId      String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
}

enum Grade {
  NORMAL
  EXPERT
}

enum Role {
  USER
  ADMIN
}

enum adminStatus {
  PENDING
  ACCEPTED
  REJECTED
  DELETED
}
